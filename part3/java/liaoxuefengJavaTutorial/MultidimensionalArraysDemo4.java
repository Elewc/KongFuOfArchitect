public class MultidimensionalArraysDemo4 {

  /**
   * 三维数组就是二维数组的数组。可以这么定义一个三维数组：
   *
   * int[][][] ns = {
   *     {
   *         {1, 2, 3},
   *         {4, 5, 6},
   *         {7, 8, 9}
   *     },
   *     {
   *         {10, 11},
   *         {12, 13}
   *     },
   *     {
   *         {14, 15, 16},
   *         {17, 18}
   *     }
   * };
   * 它在内存中的结构如下：
   *
   *                               ┌───┬───┬───┐
   *                    ┌───┐  ┌──>│ 1 │ 2 │ 3 │
   *                ┌──>│░░░│──┘   └───┴───┴───┘
   *                │   ├───┤      ┌───┬───┬───┐
   *                │   │░░░│─────>│ 4 │ 5 │ 6 │
   *                │   ├───┤      └───┴───┴───┘
   *                │   │░░░│──┐   ┌───┬───┬───┐
   *         ┌───┐  │   └───┘  └──>│ 7 │ 8 │ 9 │
   * ns ────>│░░░│──┘              └───┴───┴───┘
   *         ├───┤      ┌───┐      ┌───┬───┐
   *         │░░░│─────>│░░░│─────>│10 │11 │
   *         ├───┤      ├───┤      └───┴───┘
   *         │░░░│──┐   │░░░│──┐   ┌───┬───┐
   *         └───┘  │   └───┘  └──>│12 │13 │
   *                │              └───┴───┘
   *                │   ┌───┐      ┌───┬───┬───┐
   *                └──>│░░░│─────>│14 │15 │16 │
   *                    ├───┤      └───┴───┴───┘
   *                    │░░░│──┐   ┌───┬───┐
   *                    └───┘  └──>│17 │18 │
   *                               └───┴───┘
   *
   * 如果我们要访问三维数组的某个元素，例如，ns[2][0][1]，只需要顺着定位找到对应的最终元素15即可。
   *
   * 理论上，我们可以定义任意的N维数组。但在实际应用中，除了二维数组在某些时候还能用得上，更高维度的数组很少使用。
   * */
  public static void main(String[] args) {
    int[][][] ns = {
      { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } },
      { { 10, 11 }, { 12, 13 } },
      { { 14, 15, 16 }, { 17, 18 } },
    };
    int a = ns[2][0][1];
    System.out.println(a);
  }
}
